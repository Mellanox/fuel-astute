#!/usr/bin/env ruby

#    Copyright 2013 Mirantis, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

require 'optparse'
require 'yaml'
begin
  require 'astute'
rescue LoadError
  require 'rubygems'
  require 'astute'
end

class ConsoleReporter
  def report(msg)
    puts msg.inspect
  end
end

opts = {}
optparse = OptionParser.new do |o|
  o.banner = "Usage: bin/astute -f FILENAME"

  o.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    opts[:verbose] = v
  end

  o.on("-f FILENAME", "Environment in YAML format. Samples are in examples directory.") do |f|
    opts[:filename] = f
  end

  o.on("-h") { puts o; exit }
  
  o.on("-c", "--command COMMAND", [:deploy, :fast_provision, :provision], 
                                    "Select operation (deploy, fast_provision or provision)") do |c|
    opts[:command] = c
  end
  
end
optparse.parse!(ARGV)

if opts[:filename].nil?
  puts optparse
  ERROR_CODE_COMMAND_USAGE = 64
  exit ERROR_CODE_COMMAND_USAGE
end

reporter = ConsoleReporter.new
Astute.logger = Logger.new(STDOUT) if opts[:verbose]

environment = YAML.load_file(opts[:filename])

deploy_engine = nil

if environment['attributes'] && environment['attributes']['deployment_engine']
  case environment['attributes']['deployment_engine']
    when 'nailyfact'
      deploy_engine = Astute::DeploymentEngine::NailyFact
    when 'simplepuppet'
      deploy_engine = Astute::DeploymentEngine::SimplePuppet  # It just calls puppet and doesn't do any magic
  end
end

if [:deploy, :fast_provision, :provision].include? opts[:command]
  orchestrator = Astute::Orchestrator.new(deploy_engine, log_parsing=false)
end

result = Astute::SUCCESS

begin
  result = case opts[:command]
    when :deploy
      orchestrator.deploy(reporter, environment['task_uuid'], environment['nodes'], environment['attributes'])
    when :fast_provision
      orchestrator.fast_provision(reporter, environment['engine'], environment['nodes'])
    when :provision
      orchestrator.provision(reporter, environment['task_uuid'], environment['nodes']) 
  end
rescue
  result = Astute::FAIL
end
exit result 